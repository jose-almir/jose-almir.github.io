{"pageProps":{"post":{"id":"file-picker-react","title":"Como criar um File Picker com React?","date":"2023-05-12T00:00:00","thumbnail":"/blog/file-picker.png","desc":"Todos nós conhecemos o clássico input file, sua customização pode ser complicada caso queiramos uma estilização mais moderna. O componente que irei mostrar aqui pode ser facilmente aplicado ao seu projeto React, uma vez que só utiliza recursos da biblioteca padrão.","tags":"react, frontend","categoria":"react","content":"\r\n<section className=\"intro\">\r\n<h1>Como criar um File Picker com React?</h1>\r\n<i className=\"bi bi-clock-fill mr-xs\"></i><span> 5 min · </span><i className=\"bi bi-calendar mr-xs\"></i><span> 12 Mai, 2023</span>\r\n</section>\r\n\r\n## Componente File Picker\r\n\r\nTodos nós conhecemos o clássico `<input type=\"file\" />`, ele é um dos elementos HTML padrão, e sua customização pode ser complicada caso queiramos uma estilização mais moderna. O componente que irei mostrar aqui pode ser facilmente aplicado ao seu projeto React, uma vez que só utiliza recursos da **biblioteca padrão**.\r\n\r\nA implementação completa está disponível no <a href=\"https://stackblitz.com/edit/react-wuolto\" target=\"_blank\">Stackblitz</a>.\r\n\r\n<img src=\"/blog/screenshot-file-picker.png\" className=\"image\" alt=\"File Picker\"/>\r\n\r\n## Estilização base\r\n\r\nNo arquivo de **estilização global**, iremos aplicar os seguintes estilos:\r\n\r\n```css\r\nbody {\r\n  font-family: \"Open Sans\", \"Helvetica Neue\", sans-serif;\r\n  box-sizing: border-box;\r\n  margin: 0;\r\n  background-color: #151718;\r\n  color: whitesmoke;\r\n}\r\n\r\n.app-container {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100vh;\r\n}\r\n```\r\n\r\nAté aqui apenas modificações visuais para deixar a página mais atrativa, a ideia é centralizar o componente na tela. Agora vamos criar a estilização para o nosso file picker, crie um arquivo: **FilePicker.css**.\r\n\r\n```css\r\n@import url(\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css\");\r\n\r\n.wrapper {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.button {\r\n  width: auto;\r\n  height: 33px;\r\n  font-size: 16px;\r\n  border: 1px solid;\r\n  border-radius: 8px;\r\n  background-color: cornflowerblue;\r\n  color: whitesmoke;\r\n  cursor: pointer;\r\n  display: block;\r\n}\r\n\r\n.small {\r\n  color: rgba(255, 255, 255, 0.66);\r\n}\r\n```\r\n\r\nA estilização principal se centra no botão e outros elementos visuais que farão parte do componente conforme a imagem mostrada anteriormente.\r\n\r\n## Princípios do FilePicker\r\n\r\nPara que este componente funcione, alguns princípios devem ser levados em conta:\r\n\r\n<ul>\r\n    <li>O único elemento nativo capaz de selecionar arquivos é o input file;</li>\r\n    <li>O botão descrito na imagem anterior será responsável por acionar o explorador de arquivos do sistema;</li>\r\n    <li>O componente deve indicar um feedback que o arquivo foi selecionado com sucesso.</li>\r\n</ul>\r\n\r\nPrimeiramente vejamos como montar a base do nosso componente:\r\n\r\n```jsx\r\nimport React from \"react\";\r\nimport \"./FilePicker.css\";\r\n\r\nexport function FilePicker({ multiple, accept, onSelect }) {\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <input\r\n        hidden\r\n        type=\"file\"\r\n        accept={accept}\r\n        multiple={multiple}\r\n        onChange={(e) => onSelect(e.target.files)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nVamos entender parte por parte agora. Nosso componente irá envolver o `<input type=\"file\" />`, de tal forma que para customizar as opções possíveis recebemos algumas props.\r\n\r\n- `multiple`: É um atributo comum neste tipo de input e permite a seleção múltipla de arquivos;\r\n- `accept`: É um atributo comum que permite que apenas determinados tipos sejam selecionados;\r\n- `onSelect`: É o nome da função que irá enviar os arquivos para o componente-pai que estiver utilizando o FilePicker, tal como um formulário.\r\n\r\nObserve na linha 9, é definido a seguinte arrow function: `(e) => onSelect(e.target.files)`. Toda vez que o input for alterado, a nossa callback `onSelect` será chamada passando os arquivos como parâmetro, para esta situação optei por utilizar o evento do input chamado de `onChange`. Porém, até este ponto nada aparece em nossa interface, pois por padrão ocultamos o input usando a propriedade `hidden`.\r\n\r\nPara chamar este componente FilePicker, basta chamá-lo no **App.js** ou no local que desejar:\r\n\r\n```jsx\r\n<FilePicker\r\n  accept=\".csv, .xlsx\"\r\n  multiple\r\n  onSelect={(files) => {\r\n    console.log(files);\r\n  }}\r\n/>\r\n```\r\n\r\nPara que um botão acione o input oculto e abra o explorador de arquivos do dispositivo, será necessário \"forçar\" o clique no input mesmo ele estando oculto.\r\n\r\n## useRef\r\n\r\nO `useRef` é um hook padrão da biblioteca do React. A <a href=\"https://react.dev/reference/react/useRef\" target=\"_blank\">documentação oficial</a> define como \"um hook que permite referenciar um valor que não é necessário para renderização\". Resumidamente, ele é um valor que será preservado durante as renderizações dos componentes funcionais, e sua alteração não força uma re-renderização como o useState, por exemplo.\r\n\r\nUma das finalidades deste hook, é guardar referência de elementos da DOM, dessa forma podemos ler as informações de qualquer elemento desde que ele possua uma referência.\r\n\r\n```jsx\r\nimport React, { useRef } from \"react\";\r\nimport \"./FilePicker.css\";\r\n\r\nexport function FilePicker({ multiple, accept, onSelect }) {\r\n  const inputRef = useRef(null);\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <input\r\n        ref={inputRef}\r\n        hidden\r\n        type=\"file\"\r\n        accept={accept}\r\n        multiple={multiple}\r\n        onChange={(e) => onSelect(e.target.files)}\r\n      />\r\n      <p>Selecione um arquivo de tipo: {accept}</p>\r\n      <button className=\"button\" onClick={() => inputRef.current.click()}>\r\n        Selecionar\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nO código acima já funcione perfeitamente, porém vamos entender parte por parte do processo:\r\n\r\n- **Linha 5:** `const ref = useRef(null)`, esta linha determina uma referência no React, seu valor inicial é `null`;\r\n- **Linha 10:** `ref={inputRef}`, esta linha determina que o input agora possui uma referência do elemento na DOM. Para acessar basta utilizar `inputRef.current`;\r\n- **Linha 18:** `inputRef.current.click()`, ao clicarmos no botão invocamos um dos eventos de um input: `click`.\r\n\r\nDessa forma, é possível selecionar os arquivos mesmo que o input verdadeiro não esteja aparecendo na tela, pois nosso `inputRef` possui informação da DOM a respeito deste elemento.\r\n\r\n## Toques finais\r\n\r\nCom o FilePicker funcional, basta aplicar algumas melhorias visuais como um state para mostrar quantos arquivos foram selecionados e mudar a aparência do botão:\r\n\r\n```jsx\r\nimport React, { useState, useRef } from \"react\";\r\nimport \"./FilePicker.css\";\r\n\r\nexport function FilePicker({ multiple, accept, onSelect }) {\r\n  const [selected, setSelected] = useState(null);\r\n  const inputRef = useRef(null);\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <input\r\n        ref={inputRef}\r\n        hidden\r\n        type=\"file\"\r\n        accept={accept}\r\n        multiple={multiple}\r\n        onChange={(e) => {\r\n          onSelect(e.target.files);\r\n          setSelected(e.target.files);\r\n        }}\r\n      />\r\n      <p>Selecione um arquivo de tipo: {accept}</p>\r\n      <button className=\"button\" onClick={() => inputRef.current.click()}>\r\n        {selected ? (\r\n          <>\r\n            <i className=\"bi bi-check2-circle\" /> Selecionado\r\n          </>\r\n        ) : (\r\n          <>\r\n            <i className=\"bi bi-upload\" /> Selecionar\r\n          </>\r\n        )}\r\n      </button>\r\n      {selected && (\r\n        <small className=\"small\">\r\n          {selected.length} selecionado (s)\r\n          <span\r\n            onClick={() => {\r\n              inputRef.current.value = \"\";\r\n              setSelected(null);\r\n              onSelect(null);\r\n            }}\r\n          >\r\n            <i className=\"bi bi-x-circle\" />\r\n          </span>\r\n        </small>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nAs melhorias foram realizadas na **linha 5**, com um state para saber quando os arquivos foram selecionados ou não. Nas **linhas 23-32** mostramos um ícone e texto diferentes de acordo com o state. E na **linha 33** adicionamos um elemento básico para mostrar quantos arquivos foram selecionados, bem como a possibilidade de \"limpar\". Para isso, na **linha 37**, o onClick reseta todos os valores, inclusive da callback `onSelect`.\r\n\r\n<img src=\"/blog/screenshot-file-picker-2.png\" className=\"image\" alt=\"File Picker\"/>\r\n"}},"__N_SSG":true}